#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice Componente}


\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} 
\fancyfoot{} 

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Tesina in ASE: Architetture dei Sistemi di Elaborazione}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

\date{}
\cfoot{}
\usepackage{eso-pic,graphicx}
\makeatletter
\newcommand\BackgroundPicture[2]{
\setlength{\unitlength}{1pt}
\put(0,\strip@pt\paperheight){
\parbox[t][\paperheight]{\paperwidth}{
\vfill
\centering\includegraphics[angle=#2]{#1}
\vfill
}
}
}
\makeatother
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
In tale capitolo viene riportata la realizzazione del progetto, in particolare
 si sono implementati i seguenti script:
\end_layout

\begin_layout Itemize
sparkWF.py: tale script conta la frequenza delle parole contenute nelle review
 relative ad un dato business, mettendo in evidenza le parole più frequenti
 con il proprio grado di 
\begin_inset Quotes eld
\end_inset

positività
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
valoreUtente.py: tale script ha il compito di calcolare il valore di importanza
 attribuito ad un utente.
\end_layout

\begin_layout Itemize
valoreReview.py: tale script ha il compito di calcolare il grado di 
\begin_inset Quotes eld
\end_inset

positività
\begin_inset Quotes erd
\end_inset

 del testo di una review.
\end_layout

\begin_layout Itemize
tuning.py: tale script ha il compito di effettuare il tuning dei parametri
 della funzione che stima il valore di opinione pubblica.
\end_layout

\begin_layout Itemize
valoreOpinione.py: tale script ha il compito di stimare il valore di opinione
 pubblica.
\end_layout

\begin_layout Itemize
generaCsv.py: tale script è stato realizzato per generare i csv utili ai
 fini dell'analisi.
\end_layout

\begin_layout Itemize
valoreCumulativo.py: tale script ha il compito di stimare il valore cumulativo
 di opinione pubblica.
\end_layout

\begin_layout Standard
In particolare gli script sono presentati di seguito nell'ordine in cui
 sono stato realizzati ed eseguiti, in quanto tale ordine rappresenta il
 processo di analisi condotto per la realizzazione del progetto.
\end_layout

\begin_layout Section
valoreUtente.py
\end_layout

\begin_layout Standard
Tale script è stato realizzato per poter calcolare il valore di ogni utente.
 Nel contesto di tale progetto, un utente viene considerato 
\begin_inset Quotes eld
\end_inset

buono
\begin_inset Quotes erd
\end_inset

, e quindi con un valore alto, se è 
\begin_inset Quotes eld
\end_inset

attivo
\begin_inset Quotes erd
\end_inset

 nella community e pertanto presenta le seguenti caratteristiche:
\end_layout

\begin_layout Enumerate
E' un utente Elite: ciò significa che la community ha premiato il suo modo
 di operare.
\end_layout

\begin_layout Enumerate
E' un utente con un numero elevato di fans.
\end_layout

\begin_layout Enumerate
E' un utente con un numero elevato di amici.
\end_layout

\begin_layout Enumerate
E' un utente con un numero elevato di review scritte.
\end_layout

\begin_layout Enumerate
E' un utente che è stato per diversi anni eletto Elite.
\end_layout

\begin_layout Enumerate
E' un utente che ha ricevuto molti compliementi da altri.
\end_layout

\begin_layout Standard
Prendendo in considerazione tali fattori, il valore dell'utente è stato
 calcolato in forma chiusa con una relazione che stima il valore di un utente
 in base alle caratteristiche sopra elencate.
 In particolare ad un utente che non possiede tali caratteristiche viene
 associato un valore molto basso.
 Tale ragionamento è stato effettuato al fine di poter riconoscere degli
 utenti fake, i quali effettuano delle recensioni non veritiere.
 In effetti a nostro avviso un utente ha una elevata probabilità di essere
 fake se ha le seguenti caratteristiche:
\end_layout

\begin_layout Enumerate
Ha poche recensioni, con stelle elevate e magari tutte relative ad un'unica
 attività di business.
\end_layout

\begin_layout Enumerate
Non ha amici , ne fans.
\end_layout

\begin_layout Enumerate
Non è mai stato eletto Elite.
\end_layout

\begin_layout Standard
Di seguito è riportato il listato relativo a tale script:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

#!/usr/bin/python
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import pymongo
\end_layout

\begin_layout Plain Layout

from pymongo import MongoClient
\end_layout

\begin_layout Plain Layout

import pprint
\end_layout

\begin_layout Plain Layout

import json
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Connessione a MongoDB
\end_layout

\begin_layout Plain Layout

client = MongoClient('localhost',27017)
\end_layout

\begin_layout Plain Layout

db = client.YelpDB
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Caricamento utenti
\end_layout

\begin_layout Plain Layout

users = db.user.find()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Calcolo valore utente
\end_layout

\begin_layout Plain Layout

jsonlist = []
\end_layout

\begin_layout Plain Layout

for element in users:
\end_layout

\begin_layout Plain Layout

	subel = {}
\end_layout

\begin_layout Plain Layout

	subel['user_id']= element['user_id']   #id utente
\end_layout

\begin_layout Plain Layout

	numAnniElite = len(element['elite'])
\end_layout

\begin_layout Plain Layout

	numAmici = len(element['friends'])
\end_layout

\begin_layout Plain Layout

	sCompl = element['compliment_hot'] + element['compliment_more'] + element['comp
liment_profile'] + element['compliment_cute'] + element['compliment_list']
 + element['compliment_note'] + element['compliment_plain'] + element['complimen
t_cool'] + element['compliment_funny'] + element['compliment_writer'] +
 element['compliment_photos']
\end_layout

\begin_layout Plain Layout

 	if '2017' in element['elite']:
\end_layout

\begin_layout Plain Layout

		Elite17 = 1
\end_layout

\begin_layout Plain Layout

	else:
\end_layout

\begin_layout Plain Layout

		Elite17 = 0
\end_layout

\begin_layout Plain Layout

	subel['valore'] = 0.27*Elite17+ 0.05*numAnniElite+0.13*element['fans']+0.06*element
['review_count']+0.1*numAmici+0.1*sCompl+0.19*element['useful']+0.03*element['funny'
]+0.05*element['cool']
\end_layout

\begin_layout Plain Layout

	jsonlist.append(subel) 
\end_layout

\begin_layout Plain Layout

with open('sintesiuser.json','w') as outfile:
\end_layout

\begin_layout Plain Layout

    json.dump(jsonlist,outfile) 
\end_layout

\begin_layout Plain Layout

collection = db.sintesiuser
\end_layout

\begin_layout Plain Layout

clear = collection.remove()
\end_layout

\begin_layout Plain Layout

result = collection.insert_many(jsonlist) 
\end_layout

\begin_layout Plain Layout

client.close() 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inoltre di seguito è riportato il listato di tale programma implementato
 in pyspark:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

#!/usr/bin/python
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import pymongo
\end_layout

\begin_layout Plain Layout

from pymongo import MongoClient
\end_layout

\begin_layout Plain Layout

import pprint
\end_layout

\begin_layout Plain Layout

import json
\end_layout

\begin_layout Plain Layout

from pyspark import SparkConf, SparkContext
\end_layout

\begin_layout Plain Layout

import string
\end_layout

\begin_layout Plain Layout

import csv
\end_layout

\begin_layout Plain Layout

import re
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

conf = SparkConf()
\end_layout

\begin_layout Plain Layout

conf.setMaster("local[*]")
\end_layout

\begin_layout Plain Layout

conf.setAppName("val utente")
\end_layout

\begin_layout Plain Layout

conf.set("spark.executor.memory", "16g")
\end_layout

\begin_layout Plain Layout

sc = SparkContext(conf = conf)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Connessione a MongoDB
\end_layout

\begin_layout Plain Layout

client = MongoClient('localhost',27017)
\end_layout

\begin_layout Plain Layout

db = client.YelpDB
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Caricamento utenti
\end_layout

\begin_layout Plain Layout

users= db.user.find().limit(50000)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Calcolo valore utente
\end_layout

\begin_layout Plain Layout

jsonlist = []
\end_layout

\begin_layout Plain Layout

def worker(element):
\end_layout

\begin_layout Plain Layout

	numAnniElite = len(element['elite'])
\end_layout

\begin_layout Plain Layout

	numAmici = len(element['friends'])
\end_layout

\begin_layout Plain Layout

	sCompl = element['compliment_hot'] + element['compliment_more'] + element['comp
liment_profile'] + element['compliment_cute'] + element['compliment_list']
 + element['compliment_note'] + element['compliment_plain'] + element['complimen
t_cool'] + element['compliment_funny'] + element['compliment_writer'] +
 element['compliment_photos']
\end_layout

\begin_layout Plain Layout

 	if '2017' in element['elite']:
\end_layout

\begin_layout Plain Layout

		Elite17 = 1
\end_layout

\begin_layout Plain Layout

	else:
\end_layout

\begin_layout Plain Layout

		Elite17 = 0
\end_layout

\begin_layout Plain Layout

	valore = 0.27*Elite17+ 0.05*numAnniElite+0.13*element['fans']+0.06*element['review_
count']+0.1*numAmici+0.1*sCompl+0.19*element['useful']+0.03*element['funny']+0.05*ele
ment['cool']
\end_layout

\begin_layout Plain Layout

        subel=[element['user_id'],numAnniElite, numAmici, sCompl,element['fans']
,element['review_count'],element['useful'], element['funny'], element['cool'],va
lore]
\end_layout

\begin_layout Plain Layout

        return subel
\end_layout

\begin_layout Plain Layout

#	jsonlist.append(subel)
\end_layout

\begin_layout Plain Layout

user = sc.parallelize(users)
\end_layout

\begin_layout Plain Layout

results = user.map(worker)
\end_layout

\begin_layout Plain Layout

print ' ********************************* RESULT *************************'
\end_layout

\begin_layout Plain Layout

csvf= [["user_id","numAnniElite","numAmici","sCompl","fans","review_count","usef
ul","funny","cool","valore"]]
\end_layout

\begin_layout Plain Layout

csvf= csvf+ results.take(results.count())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

fileu=open("AnalisiUt.csv",'w') with fileu:
\end_layout

\begin_layout Plain Layout

    writer = csv.writer(fileu, delimiter=",", quotechar="|", quoting=csv.QUOTE_MIN
IMAL)
\end_layout

\begin_layout Plain Layout

    writer.writerows(csvf)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

client.close() 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Section
valoreReview.py
\end_layout

\begin_layout Standard
Tale script è stato realizzato per poter calcolare il grado di positività
 del testo contenuto in una determinata review.
 In particolare si è fatto uso della libreria NLTK di Python, al fine di
 analizzare il testo.
 Il punteggio ritornato viene calcolato effettuando la media dei punteggi
 attribuiti alle varie frasi.
 Successivamente al punteggio attribuito dalla libreria viene sommato il
 contributo relativo alle stelle associate alla review da parte dell'utente.
 In effetti le stelle sono state considerate parte integrante dell'opinione
 dell'autore e queste sono state normalizzate al fine di ricadere nel range
 [-1,1].
 In particolare è stata fatta la seguente normalizzazione:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stelle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Valore normalizzato
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0,5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-0,5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
L'output di tale script viene memorizzato in una collection del database,
 la quale è costituita da documenti ognuno dei quali rappresenta la forma
 sintetica di una review, in quanto non compare più il testo, ma il relativo
 punteggio e all'id dell'utente viene associato anche il punteggio relativo
 a quest'ultimo.
 Tali informazioni sono necessarie in quanto verranno utilizzate solo dopo
 aver trovato i parametri migliori della funzione di opnione pubblica.
 Di seguito è riportato il listato relativo a tale script:
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
tuning.py
\end_layout

\begin_layout Standard
Tale script è stato realizzato per poter effettuare il tuning dei parametri
 relativi alla formula che permette di stimare il valore dell'opinione pubblica.
 Come già anticipato nel capitolo 1, l'opinione pubblica è funzione di 3
 elementi fondamentali:
\end_layout

\begin_layout Enumerate
ContributoRecensione: è il contributo espresso dalla recensione costitutito
 da due elementi:
\end_layout

\begin_deeper
\begin_layout Itemize
Stelline: è una metrica di valutazione (da 1 a 5) da parte di un utente
\end_layout

\begin_layout Itemize
Testo: testo in linguaggio naturale espresso dall'utente.
 Tale elemento, processato opportunamente, quantifica la positività o negatività
 del pensiero dell'utente.
\end_layout

\end_deeper
\begin_layout Enumerate
ContributoUtente: è il peso associato a chi ha scritto la recensione.
 In effetti ogni pensiero viene sempre pesato in base al suo autore, per
 questo motivo una recensione scritta da un utente 
\begin_inset Quotes eld
\end_inset

buono
\begin_inset Quotes erd
\end_inset

, come precedentemente spiegato, ha un impatto maggiore sull'opinione pubblica.
 
\end_layout

\begin_layout Enumerate
SuccessoRecensione: è il peso associato a quanto popolare è stata quella
 recensione.
 In effetti una recensione che ha avuto molto successo in quanto è stata
 letta e presa in considerazione da molti utenti, ha inevitabilmente un
 impatto maggiore sull'opinione pubblica.
\end_layout

\begin_layout Standard
In particolare il successo della recensione è costituito dai tre fattori
 
\begin_inset Quotes eld
\end_inset

cool, funny, useful
\begin_inset Quotes erd
\end_inset

, che rappresentano degli apprezzamenti effettuati da altri utenti.
 Ad ognuno dei tre fattori è stato attribuito un peso, rispettivamente 
\begin_inset Quotes eld
\end_inset

alpha, beta, gamma
\begin_inset Quotes erd
\end_inset

, e pertanto la formula che stima il valore di opinione pubblica è:
\end_layout

\begin_layout Standard
\begin_inset Formula $Vopinione=ContributoRecensione*(1+ContributoUtente)*(1+\alpha*useful+\beta*cool+\gamma*funny)$
\end_inset


\end_layout

\begin_layout Standard
Il fattore 1 è stato aggiunto al fine di evitare i casi in cui il contributo
 utente, oppure il contributo di successo, sono nulli.
 Nello specifico: 
\end_layout

\begin_layout Itemize
Contributo recensione: è un valore che è compreso nel range [-1,1]
\end_layout

\begin_layout Itemize
Contributo utente: è un valore che è stato normalizzato nel range [0,10]
\end_layout

\begin_layout Itemize
Successo recensione: è un valore che è stato normalizzato nel range [0,10]
\end_layout

\begin_layout Standard
Da quanto detto si evince che il contributo della recensione può essere
 solo amplificato in modulo dai restanti fattori moltiplicativi, e quindi
 una recensione positiva scritta da un utente 
\begin_inset Quotes eld
\end_inset

buono
\begin_inset Quotes erd
\end_inset

 e apprezzata, avrà un valore di opinione più alto rispetto al suo valore
 di base.
 Ciò significa che il valore di opinione conserva il segno del contributo
 di recensione di partenza.
\end_layout

\begin_layout Standard
Il tuning dei parametri è stato effettuato considerando che valori sempre
 crescenti di useful, funny e cool, portano ad un aumento del valore di
 opinione.
 Quindi sono stati determinati i valori di aplha beta e gamma che massimizzano
 il valore di opinione pubblica di una review e ciò è stato realizzato andando
 a determinare le triple di valori che massimizzano ogni review, ed è stata
 scelta la tripla con frequenza maggiore.
 Di seguito è riportato il listato relativo allo script:
\end_layout

\begin_layout Section
valoreOpinione.py
\end_layout

\begin_layout Standard
Tale script è stato realizzato al fine di determinare il valore di opinione
 di una determinata review.
\end_layout

\begin_layout Section
valoreCumulativo.py
\end_layout

\begin_layout Standard
Tale script è stato realizzato al fine di determinare il valore cumulativo
 dell'opinione pubblica.
 Ciò è stato fatto per cercare di modellare quello che è il pensiero di
 un utente che si trova a leggere delle review di un relativo business.
 In particolare il comportamento modellato è il seguente: si associa un'importan
za maggiore alle review più attuali, e alle review precedenti si associa
 un'importanza man mano sempre più piccola.
 Quindi il pensiero dell'utente sarà influenzato dalle review appena lette
 a cui viene aggiunto un contributo dovuto alle review lette precedentemente.
 Di seguito è riportato il listato relativo a tale script: 
\end_layout

\end_body
\end_document
